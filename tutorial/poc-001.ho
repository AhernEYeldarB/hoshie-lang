// Example of very concise pipeline
{} l = {string fname, string lname, int age, string gender}
p1 = pipe(djfkshdlkjfh: number) [
    map(r => , ({...r, score: covidScore(djfkshdlkjfh)}),
    djfkshdlkjfh->min, 
    djfkshdlkjfh->filter(isodl),
    filter(isodl), 
    , score
    djfkshdlkjfh->min,
    map(r => {scale:age})
]

x = read("...xxx.json");

outData = p1(age);
outData(json, age)
write(outData, "...xxxOut.json");



p1(json, ageXXX);

p2= pipe(ageXXX:number) [
    p1(ageXXX)
]

s1 = max(age);

p1 = pipe<{age:number}>(
    sensor(count()),
    sensor(max(age)),
    sensor(s2 = filter(age < 30)),
    filter(age > 65),
    sensor(count()),
    sort(lname, -fname),
    sensor(count()),
    max(age)
);

p1 === function(object: {age, lname, fname})


outData = p

write(json,p1(agexxx))



console.log()
write(p1([{lname:string, fname:string, age:42}]), "c:\tout.json");
write(p1([{student:string, age:42}]), "c:\tout.json");
write(p1([{student:string, ageXXX:42}]), "c:\tout.json");

p2 = pipe(
    map(r=>({...r, age: ageXXX}),
    p1
)
write(p2([{student:string, ageXXX:42}]), "c:\tout.json");

s1.peek();
s2.peek();




//  Very Verbose (uppercase used to show built in hoshi functions - won't be uppercase in real) ---

function oldPerson = (n) => n > 65;

activity oldPersonFilter = FILTER(age, oldPerson);

sensor s1 = MIN(age);
sensor s2 = MIN(age);

pipeline p1 = PIPE(s1, oldPersonFilter, s2, FIRSTN(10));

dataset inData = read("./sampleData.json");
dataset outData = p1(inData);

write(outData, "outData.json");
write([{ inDataMin: s1.read(), outDataMin: s2.read()}], "outDataStats.json");

function veryOldPerson = (n) => n > 85;

sensor s3 = MIN(age);
pipeline p2 = PIPE(p1, FILTER(age, veryOldPerson), s3);

write(p2(inData), "outData2.json");
write([{ outDataMin: s2.read()}], "outData2Stats.json");
